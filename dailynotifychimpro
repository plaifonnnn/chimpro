require("dotenv").config();
const { google } = require("googleapis");
const fetch = (...args) => import("node-fetch").then(({ default: fetch }) => fetch(...args));

function getTargetSheetName(storeType) {
  if (storeType === "Makro") return "‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏à‡∏±‡∏î‡∏ä‡∏¥‡∏° Makro";
  if (storeType === "Lotus") return "‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏à‡∏±‡∏î‡∏ä‡∏¥‡∏° Lotus";
  return "‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏à‡∏±‡∏î‡∏ä‡∏¥‡∏° Other MT"; // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Big C, Tops, ‡∏Ø‡∏•‡∏Ø
}

exports.handler = async () => {
  const auth = new google.auth.JWT(
    process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
    null,
    process.env.GOOGLE_PRIVATE_KEY.replace(/\\n/g, "\n"),
    ["https://www.googleapis.com/auth/spreadsheets"]
  );
  const sheets = google.sheets({ version: "v4", auth });
  const ssId = process.env.SPREADSHEET_ID;

  const today = new Date();
  today.setHours(today.getHours() + 7); // üáπüá≠ ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢
  const dd = String(today.getDate()).padStart(2, "0");
  const mm = String(today.getMonth() + 1).padStart(2, "0");
  const yyyy = today.getFullYear();
  const todayStr = `${dd}/${mm}/${yyyy}`;

  // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  const userRes = await sheets.spreadsheets.values.get({
    spreadsheetId: ssId,
    range: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ôPC!A2:G",
  });
  const users = userRes.data.values || [];

  // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏∏‡∏Å‡∏ä‡∏µ‡∏ï
  const targetSheets = {};
  const sheetNames = ["Makro", "Lotus", "Other MT"];
  for (const name of sheetNames) {
    const res = await sheets.spreadsheets.values.get({
      spreadsheetId: ssId,
      range: `‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏à‡∏±‡∏î‡∏ä‡∏¥‡∏° ${name}!A1:AI`,
    });
    const header = res.data.values[0].map((h) => h?.trim?.());
    const rows = res.data.values.slice(1);
    targetSheets[`‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏à‡∏±‡∏î‡∏ä‡∏¥‡∏° ${name}`] = { header, rows };
  }

  const tasks = users.map(async (user) => {
    const userId = user[6];
    const storeCode = user[3];
    const storeName = user[4];
    let storeType = user[5];

    if (!storeId || !storeName || !storeType) return;

    const isOtherMT = [
      "Big C", "Maxvalu", "Donki", "The mall",
      "Golden place", "Villa", "Tops", "Food land"
    ].includes(storeType);

    const sheetName = getTargetSheetName(storeType);
    const target = targetSheets[sheetName];
    if (!target) return;

    const { header, rows } = target;
    const dateCol = header.findIndex(h => h === todayStr);
    if (dateCol === -1) {
      console.log(`‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${todayStr} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${storeName}`);
      return;
    }

    const matchedRows = isOtherMT
      ? rows.filter(r => r[1]?.trim() === storeName?.trim())
      : rows.filter(r => r[0]?.trim() === storeCode?.trim());

    const skuList = matchedRows
      .filter(r => r[2] && r[dateCol])
      .map(r => `‚Ä¢ ${r[2]} - ‡πÄ‡∏õ‡πâ‡∏≤ ${r[dateCol]} ${isOtherMT ? "‡∏ö‡∏≤‡∏ó" : "‡πÅ‡∏û‡πá‡∏Å"}`);

    if (skuList.length === 0) {
      console.log(`‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${todayStr} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${storeName}`);
      return;
    }

    const msg = `üì£ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏±‡∏î‡∏ä‡∏¥‡∏°‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${todayStr}
‡∏´‡πâ‡∏≤‡∏á: ${storeType}
‡∏™‡∏≤‡∏Ç‡∏≤: ${storeName}

${skuList.join("\n")}

‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÇ‡∏ä‡∏Ñ‡∏î‡∏µ‡∏ô‡∏∞‡∏Ñ‡∏∞ üí™`;

    try {
      const res = await fetch("https://api.line.me/v2/bot/message/push", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${process.env.LINE_CHANNEL_ACCESS_TOKEN}`,
        },
        body: JSON.stringify({
          to: userId,
          messages: [{ type: "text", text: msg }],
        }),
      });

      if (!res.ok) {
        const errText = await res.text();
        console.error(`‚ùå ‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à [${storeName}]:`, errText);
      } else {
        console.log(`‚úÖ ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ ${storeName} ‡πÅ‡∏•‡πâ‡∏ß`);
      }
    } catch (err) {
      console.error(`‚ùå ERROR ${storeName}:`, err.message);
    }
  });

  await Promise.allSettled(tasks);
  return { statusCode: 200, body: "‚úÖ All notifications attempted." };
};
